#region using directives

using System;
using System.Collections.Generic;
using System.Text;

#endregion

namespace Parameters
{
    class Program
    {
        static void doWork()
        {
            int i =69;
            Console.WriteLine(i);
            Pass.Value(i);
            Console.WriteLine(i);
            Console.WriteLine( "-----------");
            WrappedInt wi = new WrappedInt();    //Type, instance,  assignment operator, constructor
            Console.WriteLine(wi.Number);        ///will print nothing 
            Pass.Reference(wi);                 ///here is a pointer address in memory
            Console.WriteLine(wi.Number);
            Console.WriteLine("-----------");

            int j = 1776;
            Console.WriteLine(j);
            Pass.Value2(ref j); //passing j by reference 
            Console.WriteLine(j);

        }

        static void Main(string[] args)
        {
            try
            {
                doWork();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }
}

using System;

namespace Parameters//name of the solution aka ties it all in 
{
    class WrappedInt// wrappedint is just a name 
    {
        public int Number=2020;    //declaring a int name number that is public,,,this is a field //reference type is 0 due to being null

    }
}

using System;

namespace Parameters
{
    class Pass
    {
        public static void Value(int i)

        {
            i = 42;
            Console.WriteLine($"param is now{i}");///I here is a copy and changes stay in the method.
        }
        public static void Reference(WrappedInt param)
        {
            param.Number = 42;  //access operator gives access to the properties of the class
        }
        public static void Value2(ref int param)
        {
            param = 42;
        }
    }
}




