using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices.WindowsRuntime;
using Windows.Foundation;
using Windows.Foundation.Collections;
using Windows.UI.Popups;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Controls.Primitives;
using Windows.UI.Xaml.Data;
using Windows.UI.Xaml.Input;
using Windows.UI.Xaml.Media;
using Windows.UI.Xaml.Navigation;

// The Blank Page item template is documented at http://go.microsoft.com/fwlink/?LinkId=402352&clcid=0x409

namespace Cards
{
    /// <summary>
    /// An empty page that can be used on its own or navigated to within a Frame.
    /// </summary>
    public sealed partial class MainPage : Page
    {
        public const int NumHands = 4;
        private Pack pack = null;
        private Hand[] hands = new Hand[NumHands];

        public MainPage()
        {
            this.InitializeComponent();
        }

        private void dealClick(object sender, RoutedEventArgs e)
        {
            try
            {
                pack = new Pack();
                for (int handNum = 0; handNum < NumHands; handNum++)
                {
                    hands[handNum] = new Hand();
                    for (int numCards = 0; numCards < Hand.HandSize; numCards++)
                    {
                        PlayingCard cardDealt = pack.DealCardFromPack();
                        hands[handNum].AddCardToHand(cardDealt);
                    }

                }
                north.Text = hands[0].ToString();
                south.Text = hands[1].ToString();
                east.Text = hands[2].ToString();
                west.Text = hands[3].ToString();
            }
            catch (Exception ex)
            {
                MessageDialog msg = new MessageDialog(ex.Message, "Error");
                msg.ShowAsync();
            }
        }
    }
}


using System;

namespace Cards
{	
	class Pack
	{
        public const int NumSuits = 4;// symbolic constanat--change here, changes every where 
        public const int CardsPerSuit = 13; // symbolic constanat--change here, changes every where give nname to a related set of numbers
        private PlayingCard[,] cardPack;//[,] = mulidementional
        private Random randomCardSelector = new Random();

        public Pack()
        {
            cardPack = new PlayingCard[NumSuits, CardsPerSuit];//new goes to heap and returns address
            for (Suit suit = Suit.Clubs; suit <= Suit.Spades; suit++)//suits.clubs = 0
            {
                for (Value value = Value.Two; value <= Value.Ace; value++)//nested for loop useing a multidementional array
                {
                    cardPack[(int)suit, (int)value] = new PlayingCard(suit, value);//(int) is a cast
                }
            }
        }

        public PlayingCard DealCardFromPack()//picks  on card
        {
            Suit suit = (Suit)randomCardSelector.Next(NumSuits);// picks suit
            while (this.IsSuitEmpty(suit))
            {
                suit = (Suit)randomCardSelector.Next(NumSuits);// if true will return a card in the suit unless false then it will move on///run through the suit
            }
            Value value = (Value)randomCardSelector.Next(CardsPerSuit);
            while (this.IsCardAlreadyDealt(suit, value))
            {
                value = (Value)randomCardSelector.Next(CardsPerSuit);//picks another card 
            }
            PlayingCard card = this.cardPack[(int)suit, (int)value];
            this.cardPack[(int)suit, (int)value] = null;// this is to show that you delt the card. to do this you make the index you picked null and the randomizer will not pick null
            return card;//deals card 
        }

        private bool IsSuitEmpty(Suit suit)
        {
            bool result = true;
            for (Value value = Value.Two; value <= Value.Ace; value++)
{
                if (!IsCardAlreadyDealt(suit, value))
                {
                    result = false;
                    break;
                }
            }

            return result;
        }

        private bool IsCardAlreadyDealt(Suit suit, Value value)
        { 
                return (cardPack[(int)suit, (int)value] == null);
        }
    }
}

using System;

namespace Cards
{
	class Hand
	{
        public const int HandSize = 13;//symbolic constant 
        private PlayingCard[] cards = new PlayingCard[HandSize];
        private int playingCardCount = 0;//how many in the hand 

		public void AddCardToHand(PlayingCard cardDealt)
		{
			if (playingCardCount >= HandSize)//if 13 or more stop 
			{
				throw new ArgumentException("Too many cards");
			}
			cards[playingCardCount] = cardDealt;//new element in the array
			playingCardCount++;// goes to 13 
		}

		public override string ToString()
		{
			string result = "";
			foreach (PlayingCard card in this.cards)
                result += $"{card.ToString()}\n";

			return result;
		}
	}
}


namespace Cards
{
    enum Suit { Clubs, Diamonds, Hearts, Spades }
}

namespace Cards
{
	class PlayingCard
	{
        private readonly Suit suit;///suit will hold an int----this is were we set them --not be able to change the playing card 
        private readonly Value value;/// will hold an int

        public PlayingCard(Suit s, Value v)//constructor no return type
		{//what is the point of the constructor???? because it needs to build the class from the passed in values. 
			suit = s;
			value = v;
		}

        public override string ToString()//override says to nut use build in method
		{
            string result = $"{this.value} of {this.suit}";
            return result;
		}

        public Suit CardSuit()///this allows this to make to public--this is a getter combined with setters 
        {
            return this.suit;
        }

        public Value CardValue()//getter
        {
            return this.value;
        }
	}
}